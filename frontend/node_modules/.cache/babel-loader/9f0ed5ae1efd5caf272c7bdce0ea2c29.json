{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/git/lol-data/frontend/src/components/team/TeamDashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport './TeamDashboard.css';\nimport DataTable from '../common/DataTable';\nimport NavBar from '../common/NavBar';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport ReactHtmlParser from 'react-html-parser';\n/* Represents our shared player dashboard.  Currently only contains a table. */\n\nconst TeamDashboard = () => {\n  const [teamData, setTeamData] = useState(0);\n  useEffect(() => {\n    fetch('/api/get_team_data').then(res => res.json()).then(data => {\n      setTeamData(data);\n    });\n  }, []);\n  let tableData = Array.from(teamData);\n  /* updateTeamData is used to update the data on the screen after the update script finishes. */\n\n  const updateTeamData = () => {\n    fetch('/api/get_team_data').then(res => res.json()).then(data => {\n      setTeamData(data);\n      tableData = Array.from(teamData);\n    });\n  }; //Column settings for the team table.\n\n\n  const columns = [{\n    Header: \"Day Played\",\n    accessor: values => {\n      const day = values.start_time.substring(0, 10);\n      return day;\n    },\n    width: \"7%\"\n  }, {\n    Header: \"Game Version\",\n    accessor: values => {\n      //Capture the first 2 sections of game version\n      var vers = \"\";\n\n      if (values.game_version !== null) {\n        let re = new RegExp(/(\\d*.\\d*\\.)/g);\n        vers = values.game_version.match(re)[0];\n        vers = vers.substring(0, vers.length - 1);\n      }\n\n      return vers;\n    },\n    width: \"4%\"\n  }, {\n    Header: \"Participants\",\n    accessor: \"participants\",\n    Cell: ({\n      cell\n    }) => {\n      //Replaces participants names with links to their profiles.\n      let {\n        value\n      } = cell;\n      let particips = value.replace(\" \", \"\");\n      particips = particips.split(\",\");\n      let newstring = \"\";\n      particips.forEach(person => newstring += buildParticipantLink(person));\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }\n      }, ReactHtmlParser(newstring));\n    },\n    width: \"10%\"\n  }, {\n    Header: \"First Blood\",\n    accessor: \"first_blood\",\n    width: \"3%\"\n  }, {\n    Header: \"First Dragon\",\n    accessor: \"first_dragon\",\n    width: \"3%\"\n  }, {\n    Header: \"First Tower\",\n    accessor: \"first_tower\",\n    width: \"3%\"\n  }, {\n    Header: \"First Herald\",\n    accessor: \"first_rift_herald\",\n    width: \"3%\"\n  }, {\n    Header: \"First Inhib\",\n    accessor: \"first_inhib\",\n    width: \"3%\"\n  }, {\n    Header: \"Ally Dragon Kills\",\n    accessor: \"ally_dragon_kills\",\n    width: \"3%\"\n  }, {\n    Header: \"Ally Rift Heralds\",\n    accessor: \"ally_rift_herald_kills\",\n    width: \"3%\"\n  }, {\n    Header: \"Enemy Dragon Kills\",\n    accessor: \"enemy_dragon_kills\",\n    width: \"3%\"\n  }, {\n    Header: \"Enemy Rift Heralds\",\n    accessor: \"enemy_rift_herald_kills\",\n    width: \"3%\"\n  }, {\n    Header: \"Inhibs\",\n    accessor: \"inhib_kills\",\n    width: \"3%\"\n  }, {\n    Header: \"Allies\",\n    accessor: \"allies\",\n    width: \"10%\"\n  }, {\n    Header: \"Enemies\",\n    accessor: \"enemies\",\n    width: \"10%\"\n  }, {\n    Header: \"Wonned?\",\n    accessor: values => {\n      //Converts Win/Fail to true/false\n      const bool = values.win === \"Win\" ? 'True' : 'False';\n      return bool;\n    },\n    width: \"3%\"\n  }];\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"root\",\n    id: \"root\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    updateState: updateTeamData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(DataTable, {\n    columns: columns,\n    data: tableData,\n    getCellProps: cellInfo => ({\n      style: {\n        backgroundColor: cellInfo.row.cells[15].value === \"True\" ? `rgba(0,255,0,.2)` : `rgba(255,0,0,.2)`\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 6\n    }\n  }));\n};\n\nexport default TeamDashboard; //A helper function to return an <a> element with a link to the passed players profile.\n\nfunction buildParticipantLink(playerName) {\n  return \"<a href='/\" + playerName + \"'>\" + playerName + \"</a> \";\n}\n\n;","map":{"version":3,"sources":["/Users/paul/Desktop/git/lol-data/frontend/src/components/team/TeamDashboard.js"],"names":["React","useState","useEffect","DataTable","NavBar","ReactHtmlParser","TeamDashboard","teamData","setTeamData","fetch","then","res","json","data","tableData","Array","from","updateTeamData","columns","Header","accessor","values","day","start_time","substring","width","vers","game_version","re","RegExp","match","length","Cell","cell","value","particips","replace","split","newstring","forEach","person","buildParticipantLink","bool","win","cellInfo","style","backgroundColor","row","cells","playerName"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './TeamDashboard.css';\nimport DataTable from '../common/DataTable';\nimport NavBar from '../common/NavBar';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport ReactHtmlParser from 'react-html-parser';\n\n/* Represents our shared player dashboard.  Currently only contains a table. */\nconst TeamDashboard = () => {\n\n    const [teamData, setTeamData] = useState(0);\n\n    useEffect(() => {\n    fetch('/api/get_team_data').then(res => res.json()).then(data => {\n\t  setTeamData(data);\n\t});\n    }, []);\n\n    let tableData = Array.from(teamData);\n\n    /* updateTeamData is used to update the data on the screen after the update script finishes. */\n    const updateTeamData = () => {\n\tfetch('/api/get_team_data').then(res => res.json()).then(data => {\n\t    setTeamData(data);\n\t    tableData = Array.from(teamData);\n\t});\n    }\n\n    //Column settings for the team table.\n    const columns = [\n        { Header: \"Day Played\", accessor: (values) => {\n\t    const day = values.start_time.substring(0, 10);\n\t    return day\n\t}, width: \"7%\"},\n        { Header: \"Game Version\", accessor: (values) => {\n\t    //Capture the first 2 sections of game version\n\t    var vers = \"\";\n\t    if (values.game_version !== null)\n\t    {\n\t\tlet re = new RegExp(/(\\d*.\\d*\\.)/g);\n\t\tvers = values.game_version.match(re)[0];\n\t\tvers = vers.substring(0, vers.length-1);\n\t    }\n\n\t    return vers\n\t}, width: \"4%\"},\n        { Header: \"Participants\", accessor: \"participants\", Cell: ({ cell }) => {\n\n\t    //Replaces participants names with links to their profiles.\n\t    let { value } = cell;\n\t    let particips = value.replace(\" \", \"\");\n\t    particips = particips.split(\",\");\n\t    let newstring = \"\";\t\n\t    particips.forEach(person => newstring+= buildParticipantLink(person));\n\t    return <div>{ ReactHtmlParser(newstring) }</div>;\n\n\t}, width: \"10%\"},\n        { Header: \"First Blood\", accessor: \"first_blood\", width: \"3%\"},\n        { Header: \"First Dragon\", accessor: \"first_dragon\", width: \"3%\"},\n        { Header: \"First Tower\", accessor: \"first_tower\", width: \"3%\"},\n        { Header: \"First Herald\", accessor: \"first_rift_herald\", width: \"3%\"},\n        { Header: \"First Inhib\", accessor: \"first_inhib\", width: \"3%\"},\n        { Header: \"Ally Dragon Kills\", accessor: \"ally_dragon_kills\", width: \"3%\"},\n        { Header: \"Ally Rift Heralds\", accessor: \"ally_rift_herald_kills\", width: \"3%\"},\n        { Header: \"Enemy Dragon Kills\", accessor: \"enemy_dragon_kills\", width: \"3%\"},\n        { Header: \"Enemy Rift Heralds\", accessor: \"enemy_rift_herald_kills\", width: \"3%\"},\n        { Header: \"Inhibs\", accessor: \"inhib_kills\", width: \"3%\"},\n        { Header: \"Allies\", accessor: \"allies\", width: \"10%\"},\n        { Header: \"Enemies\", accessor: \"enemies\", width: \"10%\"},\n        { Header: \"Wonned?\", accessor: (values) => {\n\t    //Converts Win/Fail to true/false\n\t    const bool = values.win === \"Win\" ? 'True' : 'False';\n\t    return bool\n\t    }, width: \"3%\"}\n    ];\n\n    return (\n\t<div className=\"root\" id=\"root\">\n\t    <NavBar updateState={updateTeamData}/>\n\t    <DataTable columns={columns} data={tableData} \n\t        getCellProps={cellInfo => ({\n\t\t    style: {\n\t\t        backgroundColor: ((cellInfo.row.cells[15].value ===\"True\") ? `rgba(0,255,0,.2)`: `rgba(255,0,0,.2)`)\n\t\t     }})}\n\t    />\n\t</div>\n    );\n}\n\nexport default TeamDashboard;\n\n//A helper function to return an <a> element with a link to the passed players profile.\nfunction buildParticipantLink(playerName){\n    return(\"<a href='/\"+playerName+\"'>\"+playerName+\"</a> \");\n};\n"]},"metadata":{},"sourceType":"module"}