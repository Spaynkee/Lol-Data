{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/git/lol-data/frontend/src/components/player/GamesFilter.js\";\nimport React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Button from '@material-ui/core/Button';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Selector from './Selector';\nimport FormCheckbox from './FormCheckbox';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(2)\n    }\n  },\n  checkbox: {\n    display: \"flex\",\n    textAlign: \"center\"\n  }\n}));\n/* Holds all the filters for our player data. */\n\nconst GamesFilter = props => {\n  //Declare dates options and role options, os we can pass them to the component\n  const classes = useStyles();\n  const [dateValue, setDateVal] = useState(\"\");\n  const [roleValue, setRoleVal] = useState(\"\");\n  const [incNone, setIncNone] = useState(true);\n  let dateValues = [\"This week\", \"This Patch\", \"Last 20 Games\"];\n  let roleValues = [\"Top\", \"Jungle\", \"Mid\", \"Support\", \"Bot\"]; //Do I need a state var for each filter thing?\n  //I will clear all filters and reset the data.\n\n  function clear() {\n    setDateVal(\"\");\n    setRoleVal(\"\");\n    setIncNone(false);\n  }\n\n  function submit() {\n    alert(\"Not yet implemented :)\"); //I guess we send a request to a new API, and return.. something.\n    //It will be a list of json objects that contains all the info for our cards?\n    //So, I have to make a new endpoint that accepts several params, and then \n    // how do we send that data to another component?\n  }\n\n  const updateDate = event => {\n    setDateVal(event.target.value);\n  };\n\n  const updateRole = event => {\n    setRoleVal(event.target.value);\n  };\n\n  const updateIncNone = event => {\n    setIncNone(event.target.checked);\n  }; //2 dropdowns, a checkbox, a button\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, {\n    row: \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Selector, {\n    value: dateValue,\n    updateData: updateDate,\n    label: \"Date\",\n    values: dateValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Selector, {\n    value: roleValue,\n    updateData: updateRole,\n    label: \"Role\",\n    values: roleValues,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(FormCheckbox, {\n    value: incNone,\n    updateData: updateIncNone,\n    className: classes.checkbox,\n    label: \"Include 'None'\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    type: \"reset\",\n    color: \"secondary\",\n    onClick: clear,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 8\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: submit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 8\n    }\n  }, \"Filter\"))));\n};\n\nexport default GamesFilter;","map":{"version":3,"sources":["/Users/paul/Desktop/git/lol-data/frontend/src/components/player/GamesFilter.js"],"names":["React","useState","makeStyles","Button","FormGroup","Selector","FormCheckbox","useStyles","theme","root","margin","spacing","checkbox","display","textAlign","GamesFilter","props","classes","dateValue","setDateVal","roleValue","setRoleVal","incNone","setIncNone","dateValues","roleValues","clear","submit","alert","updateDate","event","target","value","updateRole","updateIncNone","checked"],"mappings":"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","sourcesContent":["import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\nimport Button from '@material-ui/core/Button';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Selector from './Selector';\nimport FormCheckbox from './FormCheckbox';\n\nconst useStyles = makeStyles((theme) => ({\n\t  root: {\n\t\t      '& > *': {\n\t\t\t\t    margin: theme.spacing(2)\n\t\t\t\t  },\n\t\t    },\n\tcheckbox: { display: \"flex\" ,\n\t\t    textAlign: \"center\"}\n}));\n/* Holds all the filters for our player data. */\nconst GamesFilter = (props) => {\n\t//Declare dates options and role options, os we can pass them to the component\n\tconst classes = useStyles();\n        const [dateValue, setDateVal] = useState(\"\");\n        const [roleValue, setRoleVal] = useState(\"\");\n\tconst [incNone, setIncNone] = useState(true);\n\n\tlet dateValues = [\"This week\", \"This Patch\", \"Last 20 Games\"];\n\tlet roleValues = [\"Top\", \"Jungle\", \"Mid\", \"Support\", \"Bot\"];\n\n\t//Do I need a state var for each filter thing?\n\n\t//I will clear all filters and reset the data.\n\tfunction clear()\n\t{\n\t\tsetDateVal(\"\");\n\t\tsetRoleVal(\"\");\n\t\tsetIncNone(false);\n\t}\n\tfunction submit()\n\t{\n\t\talert(\"Not yet implemented :)\");\n\t\t//I guess we send a request to a new API, and return.. something.\n\t\t//It will be a list of json objects that contains all the info for our cards?\n\t\t//So, I have to make a new endpoint that accepts several params, and then \n\t\t// how do we send that data to another component?\n\n\t}\n\tconst updateDate = (event) => {\n\t\tsetDateVal(event.target.value);\n\t}\n\n\tconst updateRole = (event) => {\n\t\tsetRoleVal(event.target.value);\n\t}\n\n\tconst updateIncNone = (event) => {\n\t\tsetIncNone(event.target.checked);\n\t}\n\n\n\t//2 dropdowns, a checkbox, a button\n    return (\n\t    <div>\n\t    \t<FormGroup row=\"true\">\n\t    \t    <Selector value={dateValue} updateData={updateDate} label=\"Date\" values={dateValues}/>\n\t    \t    <Selector value={roleValue} updateData={updateRole} label=\"Role\" values={roleValues}/>\n\t    \t    <FormCheckbox value={incNone} updateData={updateIncNone} className={classes.checkbox} label=\"Include 'None'\"/>\n\t    \t    <div className={classes.root}>\n\t\t\t    <Button variant=\"contained\" type=\"reset\" color=\"secondary\" onClick={clear}>Clear</Button>\n\t\t\t    <Button variant=\"contained\" color=\"secondary\" onClick={submit}>Filter</Button>\n\t    \t    </div>\n\t    \t</FormGroup>\n\t    </div>\n    );\n}\n\nexport default GamesFilter;\n"]},"metadata":{},"sourceType":"module"}