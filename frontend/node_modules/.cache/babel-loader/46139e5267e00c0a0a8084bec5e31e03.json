{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/git/lol-data/frontend/src/components/player/Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport DataTable from '../common/DataTable';\nimport NavBar from '../common/NavBar';\nimport GamesFilter from './GamesFilter';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n/* Represents an individual players dashboard.  Currently only contains a table. */\n\nconst Dashboard = props => {\n  const [userData, setUserData] = useState(0);\n  let api_request = \"/api/get_user_data?name=\" + props.match.params.playerId; //We need to do stuff when we have champ card data.\n  //What we want to do is... call a function UpdateChampCards?\n  //We have to create a champ card component\n\n  useEffect(() => {\n    fetch(api_request).then(res => res.json()).then(data => {\n      setUserData(data);\n    });\n  }, [props.match.params.playerId, api_request]);\n  let tableData = Array.from(userData);\n  /* updateUserData is used to update the data on the screen after the update script finishes. */\n\n  const updateUserData = () => {\n    fetch(api_request).then(res => res.json()).then(data => {\n      setUserData(data);\n      tableData = Array.from(userData);\n    });\n  }; //Column settings for the players table.\n\n\n  const columns = [{\n    Header: \"Role\",\n    accessor: \"role\",\n    width: \"4%\"\n  }, {\n    Header: \"Champion Name\",\n    accessor: \"champion_name\",\n    width: \"7%\"\n  }, {\n    Header: \"Enemy Champ Name\",\n    accessor: \"enemy_champion_name\",\n    width: \"7%\"\n  }, {\n    Header: \"First Blood\",\n    accessor: \"first_blood\",\n    width: \"3%\"\n  }, {\n    Header: \"First Blood Assist\",\n    accessor: \"first_blood_assist\",\n    width: \"7%\"\n  }, {\n    Header: \"Kills\",\n    accessor: \"kills\",\n    width: \"3%\"\n  }, {\n    Header: \"Deaths\",\n    accessor: \"deaths\",\n    width: \"3%\"\n  }, {\n    Header: \"Assists\",\n    accessor: \"assists\",\n    width: \"3%\"\n  }, {\n    Header: \"Damage to Champs\",\n    accessor: \"damage_to_champs\",\n    width: \"3%\"\n  }, {\n    Header: \"Damage to Turrets\",\n    accessor: \"damage_to_turrets\",\n    width: \"3%\"\n  }, {\n    Header: \"Gold Per Min\",\n    accessor: \"gold_per_minute\",\n    width: \"7%\"\n  }, {\n    Header: \"Creeps Per Min\",\n    accessor: \"creeps_per_minute\",\n    width: \"3%\"\n  }, {\n    Header: \"XP Per Min\",\n    accessor: \"xp_per_minute\",\n    width: \"3%\"\n  }, {\n    Header: \"Wards Placed\",\n    accessor: \"wards_placed\",\n    width: \"3%\"\n  }, {\n    Header: \"Pinks Get\",\n    accessor: \"vision_wards_bought\",\n    width: \"3%\"\n  }, {\n    Header: \"Items\",\n    accessor: \"items\",\n    width: \"10%\"\n  }, {\n    Header: \"Wonned?\",\n    accessor: values => {\n      //Converts Win/Fail to true/false\n      const bool = values.win === \"Win\" ? 'True' : 'False';\n      return bool;\n    },\n    width: \"3%\"\n  }]; //We want to add a bunch of cards for each element in an API call?\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"root\",\n    id: \"PlayerRoot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 2\n    }\n  }, /*#__PURE__*/React.createElement(NavBar, {\n    updateState: updateUserData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(GamesFilter, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(DataTable, {\n    columns: columns,\n    data: tableData,\n    getCellProps: cellInfo => ({\n      style: {\n        backgroundColor: cellInfo.row.cells[16].value === \"True\" ? `rgba(0,255,0,.2)` : `rgba(255,0,0,.2)`\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 6\n    }\n  }));\n};\n\nexport default Dashboard;","map":{"version":3,"sources":["/Users/paul/Desktop/git/lol-data/frontend/src/components/player/Dashboard.js"],"names":["React","useState","useEffect","DataTable","NavBar","GamesFilter","Dashboard","props","userData","setUserData","api_request","match","params","playerId","fetch","then","res","json","data","tableData","Array","from","updateUserData","columns","Header","accessor","width","values","bool","win","cellInfo","style","backgroundColor","row","cells","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DataTable from '../common/DataTable';\nimport NavBar from '../common/NavBar';\nimport GamesFilter from './GamesFilter';\nimport \"bootstrap/dist/css/bootstrap.min.css\"\n\n/* Represents an individual players dashboard.  Currently only contains a table. */\nconst Dashboard = (props) => {\n    const [userData, setUserData] = useState(0);\n\n    let api_request = \"/api/get_user_data?name=\" + props.match.params.playerId;\n    //We need to do stuff when we have champ card data.\n    //What we want to do is... call a function UpdateChampCards?\n    //We have to create a champ card component\n\n    useEffect(() => {\n    fetch(api_request).then(res => res.json()).then(data => {\n\t  setUserData(data);\n\t});\n    }, [props.match.params.playerId, api_request]);\n\n    let tableData = Array.from(userData);\n\n    /* updateUserData is used to update the data on the screen after the update script finishes. */\n    const updateUserData = () => {\n\tfetch(api_request).then(res => res.json()).then(data => {\n\t    setUserData(data);\n\t    tableData = Array.from(userData);\n\t});\n    }\n\n    //Column settings for the players table.\n    const columns = [\n        { Header: \"Role\", accessor: \"role\", width: \"4%\"},\n        { Header: \"Champion Name\", accessor: \"champion_name\", width: \"7%\"},\n        { Header: \"Enemy Champ Name\", accessor: \"enemy_champion_name\", width: \"7%\"},\n        { Header: \"First Blood\", accessor: \"first_blood\", width: \"3%\"},\n        { Header: \"First Blood Assist\", accessor: \"first_blood_assist\", width: \"7%\"},\n        { Header: \"Kills\", accessor: \"kills\", width: \"3%\"},\n        { Header: \"Deaths\", accessor: \"deaths\", width: \"3%\"},\n        { Header: \"Assists\", accessor: \"assists\", width: \"3%\"},\n        { Header: \"Damage to Champs\", accessor: \"damage_to_champs\", width: \"3%\"},\n        { Header: \"Damage to Turrets\", accessor: \"damage_to_turrets\", width: \"3%\"},\n        { Header: \"Gold Per Min\", accessor: \"gold_per_minute\", width: \"7%\"},\n        { Header: \"Creeps Per Min\", accessor: \"creeps_per_minute\", width: \"3%\"},\n        { Header: \"XP Per Min\", accessor: \"xp_per_minute\", width: \"3%\"},\n        { Header: \"Wards Placed\", accessor: \"wards_placed\", width: \"3%\"},\n        { Header: \"Pinks Get\", accessor: \"vision_wards_bought\", width: \"3%\"},\n        { Header: \"Items\", accessor: \"items\", width: \"10%\"},\n        { Header: \"Wonned?\", accessor: (values) => {\n\t    //Converts Win/Fail to true/false\n\t    const bool = values.win === \"Win\" ? 'True' : 'False';\n\t    return bool\n\t    }, width: \"3%\"}\n    ];\n\n\t//We want to add a bunch of cards for each element in an API call?\n    return (\n\t<div className=\"root\" id=\"PlayerRoot\">\n\t    <NavBar updateState={updateUserData}/>\n\t    <GamesFilter />\n\t    <DataTable columns={columns} data={tableData} \n\t\t    getCellProps={cellInfo => ({\n\t\t\tstyle: {\n\t\t\t    backgroundColor: ((cellInfo.row.cells[16].value ===\"True\") ? `rgba(0,255,0,.2)`: `rgba(255,0,0,.2)`)\n\t\t\t}})}\n\t    />\n\t</div>\n    );\n}\n\nexport default Dashboard;\n"]},"metadata":{},"sourceType":"module"}