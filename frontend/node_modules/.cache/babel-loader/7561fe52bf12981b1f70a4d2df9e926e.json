{"ast":null,"code":"var _jsxFileName = \"/Users/paul/Desktop/git/lol-data/frontend/src/components/common/NavBar.js\";\nimport React, { useState, useEffect } from 'react';\nimport \"./NavBar.css\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport UserMenuButton from './UserMenuButton';\n/* Contains our nav bar and all its related logic. */\n\nconst NavBar = ({\n  label,\n  updateState\n}) => {\n  //Holds the state of our navbar and its elements\n  const [navBarState, setNavBarState] = useState({\n    chipColor: 'green',\n    chipDisplay: 'none',\n    buttonDisabled: false\n  });\n  useEffect(() => {\n    document.title = \"loldat\";\n    getScriptStatus();\n    setInterval(() => {\n      getScriptStatus();\n    }, 5000); //not sure what to do about the lint error here.\n    // eslint-disable-next-line\n  }, []);\n  /*getScriptStatus makes a call to our script status API, and shows or hides the update chip\n  as needed. When the update is finished, we call the passed updateState method. */\n\n  const getScriptStatus = () => {\n    fetch('/api/get_script_status').then(res => res.json()).then(data => {\n      if (data[0]['status'] === \"Running\") {\n        setNavBarState({\n          chipColor: \"yellow\",\n          buttonDisabled: true,\n          chipDisplay: \"inline\"\n        });\n      } else if (data[0]['status'] === \"Success\") {\n        setNavBarState({\n          chipColor: \"green\",\n          buttonDisabled: false,\n          chipDisplay: \"none\"\n        });\n        var current_time = new Date();\n        var end_time = new Date(data[0]['end_time']);\n\n        if (current_time - end_time < 5000) {\n          updateState();\n        }\n      }\n    });\n  };\n  /* update runs the update script by sending a request to our update_data api.*/\n\n\n  function update() {\n    setNavBarState({\n      buttonDisabled: true\n    });\n    fetch('/api/get_script_status').then(res => res.json()).then(data => {\n      //If our script is not currently \"Running\", then we start it.\n      if (data.hasOwnProperty('status') === false || data[0]['status'] !== \"Running\") {\n        setNavBarState({\n          chipColor: \"yellow\",\n          buttonDisabled: true,\n          chipDisplay: \"inline\"\n        });\n        fetch('/api/update_data');\n      }\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(AppBar, {\n    position: \"static\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 10\n    }\n  }, /*#__PURE__*/React.createElement(Toolbar, {\n    variant: \"dense\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(UserMenuButton, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"a\", {\n    className: \"nostyle\",\n    href: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    style: {\n      flexGrow: 1\n    },\n    color: \"inherit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 4\n    }\n  }, \"Hell yeah br\\xF6ther\")), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Chip, {\n    style: {\n      backgroundColor: navBarState.chipColor,\n      display: navBarState.chipDisplay\n    },\n    label: \"\\xA0\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    color: \"inherit\",\n    disabled: navBarState.buttonDisabled,\n    onClick: update,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 11\n    }\n  }, \"Update\"))));\n};\n\nexport default NavBar;","map":{"version":3,"sources":["/Users/paul/Desktop/git/lol-data/frontend/src/components/common/NavBar.js"],"names":["React","useState","useEffect","AppBar","Toolbar","Typography","Button","Chip","UserMenuButton","NavBar","label","updateState","navBarState","setNavBarState","chipColor","chipDisplay","buttonDisabled","document","title","getScriptStatus","setInterval","fetch","then","res","json","data","current_time","Date","end_time","update","hasOwnProperty","flexGrow","backgroundColor","display"],"mappings":"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","sourcesContent":["import React, { useState, useEffect} from 'react';\nimport \"./NavBar.css\";\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Chip from '@material-ui/core/Chip';\nimport UserMenuButton from './UserMenuButton';\n\n/* Contains our nav bar and all its related logic. */\nconst NavBar = ({label, updateState}) => {\n\n\t//Holds the state of our navbar and its elements\n\tconst [navBarState, setNavBarState] = useState({\n\t\tchipColor: 'green',\n\t\tchipDisplay: 'none',\n\t\tbuttonDisabled: false\n\t});\n\n\tuseEffect(() => {\n\t\tdocument.title = \"loldat\";\n\n\t\tgetScriptStatus();\n\t\tsetInterval(() => {\n\t\t\tgetScriptStatus();\n\n\t\t}, 5000);\n\t\t//not sure what to do about the lint error here.\n\t\t// eslint-disable-next-line\n\t}, []); \n\n\t/*getScriptStatus makes a call to our script status API, and shows or hides the update chip\n\tas needed. When the update is finished, we call the passed updateState method. */\n        const getScriptStatus = () => {\n\t    fetch('/api/get_script_status').then(res => res.json()).then(data => {\n\n\t    if(data[0]['status'] === \"Running\")\n\t    {\n\t\tsetNavBarState({chipColor: \"yellow\", buttonDisabled: true, chipDisplay: \"inline\"});\n\t    }\n\t    else if (data[0]['status'] === \"Success\") {\n\t\tsetNavBarState({chipColor: \"green\", buttonDisabled: false, chipDisplay: \"none\"});\n\t\tvar current_time = new Date();\n\t\tvar end_time = new Date(data[0]['end_time']);\n\t\tif (current_time - end_time < 5000)\n\t\t{\n\t\t    updateState()\n\t\t}\n\t    }});\n        }  \n\t/* update runs the update script by sending a request to our update_data api.*/\n\tfunction update()\n\t{\n\t    setNavBarState({buttonDisabled: true});\n\t\t\n\t    fetch('/api/get_script_status').then(res => res.json()).then(data => {\n\n\t\t//If our script is not currently \"Running\", then we start it.\n\t        if (data.hasOwnProperty('status') === false || data[0]['status'] !== \"Running\" ) {\n\t\t   setNavBarState({chipColor: \"yellow\", buttonDisabled: true, chipDisplay: \"inline\"});\n\t\t   fetch('/api/update_data');\n\t\t}});\n\t}\n\n\treturn (<AppBar position=\"static\">\n\t\t  <Toolbar variant=\"dense\">\n\t\t    <UserMenuButton />\n\t\t    <a className=\"nostyle\" href=\"/\">\n\t\t\t<Typography variant=\"h6\" style={{flexGrow: 1}} color=\"inherit\">\n\t\t\t    Hell yeah bröther\n\t\t\t</Typography>\n\t\t    </a>\n\t\t    <div>\n\t\t        <Chip style={{backgroundColor:navBarState.chipColor, display:navBarState.chipDisplay}} label=\"&nbsp;\" />\n\t\t        <Button color=\"inherit\" disabled={navBarState.buttonDisabled} onClick={update}>Update</Button>\n\t\t  </div>\n\t\t  </Toolbar>\n\t\t</AppBar>)\n}\n\nexport default NavBar\n"]},"metadata":{},"sourceType":"module"}